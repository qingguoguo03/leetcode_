
# 前缀树的思想，借用path,end统计
class TrieNode(object):
    def __init__(self):
        self.path = 0
        self.end = 0
        self.next = {}
    
    
class Trie:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.root = TrieNode()
        

    def insert(self, word: str) -> None:
        """
        Inserts a word into the trie.
        """
        word = word.strip()
        if word:
            cur = self.root.next
            n = len(word)
            for i,w in enumerate(word):
                if w not in cur:
                    cur[w] = TrieNode()
                cur[w].path = 1
                if i == n-1:
                    cur[w].end =1
                cur = cur[w].next
                
                    

    def search(self, word: str) -> bool:
        """
        Returns if the word is in the trie.
        """
        word = word.strip()
        n = len(word)
        if word:
            cur = self.root.next
            for i,w in enumerate(word):
                if w not in cur:
                    return False
                if i == n-1 and cur[w].end == 0: # 这里有点复杂了，可以直接简化 for的时候直接到[:-1]就好 这个判断就可以去掉了
                    return False
                cur = cur[w].next
            return True

    def startsWith(self, prefix: str) -> bool:
        """
        Returns if there is any word in the trie that starts with the given prefix.
        """
        word = prefix.strip()
        if word:
            cur = self.root.next
            for w in word:
                if w not in cur:
                    return False
                cur = cur[w].next
            return True

# Your Trie object will be instantiated and called as such:
# obj = Trie()
# obj.insert(word)
# param_2 = obj.search(word)
# param_3 = obj.startsWith(prefix)

# 简化以后
class TrieNode(object):
    def __init__(self, path=0, end=0):
        self.path = path
        self.end = end
        self.next = {}
    
    
class Trie:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.root = TrieNode()
        

    def insert(self, word: str) -> None:
        """
        Inserts a word into the trie.
        """
        word = word.strip()
        if word:
            cur = self.root.next
            for w in word[:-1]:
                if w not in cur:
                    cur[w] = TrieNode()
                cur = cur[w].next
            if word[-1] not in cur:
                cur[word[-1]] = TrieNode() 
            cur[word[-1]].end = 1
                    

    def search(self, word: str) -> bool:
        """
        Returns if the word is in the trie.
        """
        word = word.strip()
        if word:
            cur = self.root.next
            for w in word[:-1]:
                if w not in cur:
                    return False
                cur = cur[w].next
            if word[-1] not in cur or cur[word[-1]].end == 0:
                return False
            return True

    def startsWith(self, prefix: str) -> bool:
        """
        Returns if there is any word in the trie that starts with the given prefix.
        """
        word = prefix.strip()
        if word:
            cur = self.root.next
            for w in word:
                if w not in cur:
                    return False
                cur = cur[w].next
            return True
            
            
