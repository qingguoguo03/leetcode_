# 参照705题的思路，这题不只是插入value，而是键值对，并且伴随着更新
class MyHashMap(object):

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.size = 10000
        self.data = [[[],[]] for _ in range(self.size)]
        

    def has_key(self, key):
        index1 = key // self.size
        index2 = key % self.size
        bucket = self.data[index2]
        for i, value in enumerate(bucket[0]):
            if value == index1:
                return index2, index1, i, bucket
        return index2, index1,  -1, bucket
        
    def put(self, key, value):
        """
        value will always be non-negative.
        :type key: int
        :type value: int
        :rtype: void
        """
        index2, index1, i, bucket = self.has_key(key)
        if i == -1:
            bucket[0].append(index1)
            bucket[1].append(value)
        else:
            bucket[1][i] = value
            
    def get(self, key):
        """
        Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key
        :type key: int
        :rtype: int
        """
        index2, index1, i, bucket = self.has_key(key)
        if i != -1:
            return bucket[1][i]
        else:
            return -1
            
    def remove(self, key):
        """
        Removes the mapping of the specified value key if this map contains a mapping for the key
        :type key: int
        :rtype: void
        """
        index2, index1, i, bucket = self.has_key(key)
        if i != -1:
            del bucket[0][i]
            del bucket[1][i]
        
# 最初的想法是同网上找到的这个方法差不多，但是这儿方法的话，可能比较占空间？ 但是索引比上面查找的效率高很多很多 所以看空间限制要求
class MyHashMap:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.buckets = 1000
        self.itemsPerBuckect = 1001
        self.hashmap = [[] for _ in range(self.buckets)]

    def hash(self, key):
        return key % self.buckets
    
    def pos(self, key):
        return key // self.buckets

    def put(self, key, value):
        """
        value will always be positive.
        :type key: int
        :type value: int
        :rtype: void
        """
        hashkey = self.hash(key)
        if not self.hashmap[hashkey]:
            self.hashmap[hashkey] = [None] * self.itemsPerBuckect # 这里开辟了二维空间，所以会占一点时间。
        self.hashmap[hashkey][self.pos(key)] = value

    def get(self, key):
        """
        Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key
        :type key: int
        :rtype: int
        """
        hashkey = self.hash(key)
        if (not self.hashmap[hashkey]) or self.hashmap[hashkey][self.pos(key)] == None:
            return -1
        else:
            return self.hashmap[hashkey][self.pos(key)]

    def remove(self, key):
        """
        Removes the mapping of the specified value key if this map contains a mapping for the key
        :type key: int
        :rtype: void
        """
        hashkey = self.hash(key)
        if self.hashmap[hashkey]:
            self.hashmap[hashkey][self.pos(key)] = None
--------------------- 
作者：负雪明烛 
来源：CSDN 
原文：https://blog.csdn.net/fuxuemingzhu/article/details/81017297 
版权声明：本文为博主原创文章，转载请附上博文链接！
