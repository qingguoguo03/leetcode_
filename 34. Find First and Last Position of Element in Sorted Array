# 讨论中以为大神的做法 这个做法特别有意思 很有思想， 但是总体下来速度效率是一样的，这种做法在大规模相等的时候 效率应该高一点
def searchRange(self, nums, target):
    def search(lo, hi):
        if nums[lo] == target == nums[hi]:
            return [lo, hi]
        if nums[lo] <= target <= nums[hi]:
            mid = (lo + hi) / 2
            l, r = search(lo, mid), search(mid+1, hi)
            return max(l, r) if -1 in l+r else [l[0], r[1]]
        return [-1, -1]
    if not nums: # 忘记考虑为空的时候的情况 这个条件要加上
        return [-1,-1]
    return search(0, len(nums)-1)
    

# 似乎嵌套的函数 没有logn 做法
class Solution(object):
     def searchRange(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        lens = len(nums)-1
        def get_index(ind):
            r = ind+1
            while r<= lens and nums[r] == target:
                r += 1
            l = ind-1
            while l>= 0 and nums[l] == target:
                l -= 1
            return [l+1, r-1]
            
        l, r = 0, lens
        if not nums or (target<nums[0] or target>nums[-1]):
            return [-1,-1]
        while l<=r:
            mid = l+r >> 1
            if nums[mid] == target:
                return get_index(mid)
            if nums[l] == target:
                return get_index(l)
            if nums[r] == target:
                return get_index(r)
            if nums[l] <= target <= nums[mid]:
                r = mid -1
            else:
                l = mid + 1
        return [-1,-1]
                    


#这道题目没有看清楚就做了 误以为简历在上面的题目 也就是有转折的情况下 得到范围， 实际上并没有那么复杂
class Solution(object):
     def searchRange(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        lens = len(nums)-1
        def get_index(ind):
            if ind == lens:
                if nums[0] == target:
                    return [0, lens]
            if ind == 0:
                if nums[-1] == target:
                    return [0, lens]
            
            r = ind+1
            while r<= lens and nums[r] == target:
                r += 1
            l = ind-1
            while l>= 0 and nums[l] == target:
                l -= 1
            return [l+1, r-1]
            
        #特殊情况 就是 如果最后一个是value 那么旋转过来的第一个数字就是value
        l, r = 0, len(nums)-1
        
        while l<=r:
            mid = l+r >> 1
            if nums[mid] == target:
                return get_index(mid)
            if nums[l] == target:
                return get_index(l)
            if nums[r] == target:
                return get_index(r)
            if nums[l] <= nums[mid]:
                if nums[l] <= target <= nums[mid]:
                    r = mid -1
                else:
                    l = mid + 1
            else:
                if nums[mid] <= target <= nums[r]:
                    l = mid + 1
                else:
                    r = mid - 1
        return [-1,-1]
        
