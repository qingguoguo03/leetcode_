
# 前缀树加上递归
class Trie(object):
    def __init__(self):
        self.next = {}
        self.string = '' # 存查找的字符串
        

class Solution:
    def findWords(self, board: List[List[str]], words: List[str]) -> List[str]:
        # 前缀树+递归查找
        root = Trie()
        for word in words:
            cur = root
            for w in word:
                if w not in cur.next:
                    cur.next[w] = Trie()
                cur = cur.next[w]
            cur.string = word
        
        def dfs(i, j, cur):
            
            if cur.string:                #这个判断条件必须加在后面这个判断之前，特例['a']
                ans.append(cur.string)
                cur.string = ''
                
            if i<0 or i>= m or j<0 or j>=n:
                return
            
            if board[i][j] in cur.next:
                # print('dfs:', board[i][j])
                tmp, board[i][j] = board[i][j], '#'
                for ii, jj in [(i+1, j),(i-1, j),(i, j+1),(i, j-1)]:
                    dfs(ii, jj, cur.next[tmp])
                board[i][j] = tmp
        
        
        ans = []
        m, n = len(board), len(board[0])
        for i in range(m):
            for j in range(n):
                dfs(i, j, root)
        return ans
        
# 下面是一个大神的做法： 巧用复数的思想 把边界问题都解决了 很聪明
class Solution:
    def findWords(self, board, words):

        root = {}
        for word in words:
            node = root
            for c in word:
                node = node.setdefault(c, {})
            node[None] = True
        board = {i + 1j*j: c
                 for i, row in enumerate(board)
                 for j, c in enumerate(row)}

        found = []
        def search(node, z, word):
            if node.pop(None, None):
                found.append(word)
            c = board.get(z)
            if c in node:
                board[z] = None
                for k in range(4):
                    search(node[c], z + 1j**k, word + c)
                board[z] = c
        for z in board:
            search(root, z, '')

        return found
        
        
