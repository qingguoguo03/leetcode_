
class UF(object):
    
    def make_sets(self, arr):
        self.parent = {i:i for i in arr} # 每个节点的父亲赋值为自己
        self.size = dict.fromkeys(arr, 1)
        self.max_size = 1
        self.count = len(self.parent)
        
    def find_head(self, i):
        p = self.parent[i]
        if p != i:
            p = self.find_head(p)
        self.parent[i] = p
        return p
    
    def union_heads(self, i, j):
        try:
            p1, p2 = self.find_head(i), self.find_head(j)
        except:
            return 
        if p1 != p2:
            p1, p2 = (p1, p2) if (self.size[p1] >= self.size[p2]) else (p2, p1)
            self.parent[j] = p1
            self.parent[i] = p1
            self.parent[p2] = p1 # 这句特别关键 记得改变原来点的父节点 找bug找了许久 才发现忘记写了这个 坑爹！！！
            self.size[p1] += self.size[p2]
            self.size[p2] = 0 # 避免重复计算个数
            self.count -= 1
            self.max_size = max(self.max_size, self.size[p1])
            
    def get_subset_max(self):
        return self.max_size
    
  
   
nums = [100, 4, 200, 1, 3, 2]
uf = UF()
uf.make_sets(nums)
visited = set()
for num in nums:
    if num not in visited:
        uf.union_heads(num, num-1)
        uf.union_heads(num, num+1)
        visited.add(num)
print(uf.get_subset_max())

# 不用并查集做，另外一种比较聪明的做法
class Solution:
    # 一种是并查集的做法
    # 一种是查找最长回文串的做法
    def longestConsecutive(self, nums: List[int]) -> int:
        max_len = 0
        for num in nums: # 如果用while 那么就是两个指针一个+ 一个- 还可以remove掉遍历过的
            if num-1 in nums:
                continue
            cnt = 1
            while True:
                if num+1 in nums:
                    cnt += 1
                    num = num+1
                else:
                    break
            max_len = max(max_len, cnt)
        return max_len




